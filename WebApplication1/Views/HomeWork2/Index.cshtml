
@{
    ViewData["Title"] = "Index";
}
<form id="userForm">
    <fieldset>
    <legend>個人資料<em>(必填)</em></legend>
    <div class="mb-3">
        <label for="username">姓名:</label>
        <br />
        <input type="text" id="username" name="Name" placeholder="Guest" maxlength="15"/>
        <div id="namecheck"></div>
    </div>
    <div class="mb-3">
        <label for="useremail">電子郵件:</label>
        <br />
            <input type="email" id="useremail" name="Email" placeholder="Email" maxlength="20" />
    </div>
    <div class="mb-3">
        <label for="userage">年紀:</label>
        <br />
            <input type="number" id="userage" name="Age" placeholder="age" maxlength="4" />
    </div>
    <div class="mb-3">
        <input type="submit" id="submit" value="送出" class="btn btn-primary"/>
    </div>
    </fieldset>
</form>
<div id="output" class="p-5"></div>

@section Scripts{
    <script>
        const customername = document.querySelector("#username");
        // const email = document.querySelector("#useremail");
        // const age = document.querySelector("#userage");
        const submit = document.querySelector("#submit");
        const namecheck = document.querySelector("#namecheck");
        const divoutput = document.querySelector("#output");
        let nameinput;
        
        customername.addEventListener("keyup",async (elem) => {
            nameinput = elem.target.value;
            try {
                const nameurl = `@Url.Content("~/API/CheckAccount")?name=${nameinput}`;
                const nameResponse = await fetch(nameurl);
                
                //檢查連線
                if (!nameResponse.ok) throw new Error(nameResponse.status);
                //取得name
                const name = await nameResponse.text();
                console.log(name);

                if (name=="True") {
                    namecheck.style.color = "red";
                    namecheck.innerHTML = "帳號已存在";
                } else if(name=="False") {
                    namecheck.style.color = "blue";
                    namecheck.innerHTML = "帳號可使用";
                }
            } catch {

            } finally {

            }
         })
         const theform=document.querySelector("#userForm")

        submit.addEventListener("click",async (elem) => {
            //停止submit按鈕 click時就會送出並關閉表單的行為
            elem.preventDefault(); 

            //透過FormData物件讀取資料
            const formData = new FormData(theform);
            // formData.append("city","中壢")
            // for (const pair of formData.entries()) {
            //     console.log(pair[0])
            //     console.log(pair[1])
            // }
            //檢查有沒有塞進去
            
            try {
                //將formData資料傳送到server端
                const nameurl = '@Url.Content("~/API/Register")';
                const nameResponse = await fetch(nameurl,{
                    method:'POST',
                    //要包成物件用封包傳遞必須改成POST
                    body:formData
                    //把資料塞到body裡面
                });
                //檢查連線
                if (!nameResponse.ok) throw new Error(nameResponse.status);
                //取得name
                const datas = await nameResponse.text();
                //顯示在畫面上
                divoutput.innerHTML = datas;
                divoutput.style.background = "lightblue";
            } catch {

            } finally {

            }
        });
    </script>
}
